from aiogram import types, F
from aiogram.types import InputMediaPhoto, FSInputFile
from asgiref.sync import sync_to_async

from handlers.routes import router, logger
from aiogram.fsm.context import FSMContext

from states.history_static import set_user_state
from states.states import UserState
from keyboards.catalog.sub_cat.ComputersBuilder import computer_builder, build_navigation_keyboard
from products.models import Product, Category


async def get_subcategory_products(parent_category_name, subcategory_name):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    parent_category = await sync_to_async(lambda: Category.objects.filter(name=parent_category_name).first())()

    if not parent_category:
        return []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å –Ω—É–∂–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    subcategory = await sync_to_async(lambda: parent_category.subcategories.filter(name=subcategory_name).first())()

    if not subcategory:
        return []

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    products = await sync_to_async(lambda: list(subcategory.products.all()))()
    return products

@router.callback_query(F.data == 'office')
async def show_gaming_pc_with_cart(callback: types.CallbackQuery, state: FSMContext):
    """ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–æ—Ñ–∏—Å–Ω—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã', –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–ö–æ–º–ø—å—é—Ç–µ—Ä—ã' """
    await set_user_state(state, UserState.select_office_pc)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.first_name} –≤—ã–±—Ä–∞–ª —Ä–∞–∑–¥–µ–ª –ö–æ–º–ø—å—é—Ç–µ—Ä—ã/–û—Ñ–∏—Å–Ω—ã–µ")

    products = await get_subcategory_products("–∫–æ–º–ø—å—é—Ç–µ—Ä—ã", "–æ—Ñ–∏—Å–Ω—ã–µ")  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã

    if not products:
        await callback.answer("‚ùå –í –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–û—Ñ–∏—Å–Ω—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã' –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        return

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤ FSMContext
    await state.update_data(products=products, product_index=0)

    await update_product_message(callback, state)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è

async def update_product_message(callback: types.CallbackQuery, state: FSMContext):
    """ –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–º —Ç–æ–≤–∞—Ä–µ """
    data = await state.get_data()
    products = data.get("products", [])
    index = data.get("product_index", 0)

    if not products:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    prod = products[index]  # –ë–µ—Ä–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–≤–∞—Ä
    images = await sync_to_async(lambda: list(prod.images.all()))()
    image_path = images[0].image.path if images else "server/assets/images/computers.png"
    builder = build_navigation_keyboard(index, len(products), prod.id)  # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    await callback.message.edit_media(
        media=InputMediaPhoto(
            media=FSInputFile(image_path),
            caption=f"üñ• <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {prod.name}\nüìú <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {prod.description}\nüí∞ <b>–¶–µ–Ω–∞:</b> {prod.price} —Ä—É–±."
        ),
        reply_markup=builder.as_markup()
    )
