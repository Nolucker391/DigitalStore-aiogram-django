import asyncio
from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, PreCheckoutQuery, LabeledPrice
from asgiref.sync import sync_to_async
from config.config_reader import config
from handlers.routes import router, logger
from orders.models import Order
from basket.models import Basket

# üè¶ –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—ã–π —Ç–æ–∫–µ–Ω
provider_token = config.payment_token.get_secret_value()

@router.callback_query(F.data == "accept_order")
async def start_order(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (—Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂)"""
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ–ø–ª–∞—Ç—É —Ç–æ–≤–∞—Ä–∞"""
    try:
        await callback.message.delete()

        prices = [LabeledPrice(label="–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑", amount=5000)]  # 50.00 RUB –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        currency = "RUB"

        # ‚úÖ –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û–ø–ª–∞—Ç–∏—Ç—å"
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ö–∞—Å—Å–æ–≤—ã–π —á–µ–∫", pay=True)],
                [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay_order")]
            ]
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –∏ –≤–∞–ª—é—Ç—É –≤ state (–∫–æ–Ω—Ç–µ–∫—Å—Ç)
        await state.update_data(amount=prices[0].amount / 100, currency=currency)

        logger.info(f"üõí –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–ª–∞—Ç–µ–∂–∞: {prices}, –í–∞–ª—é—Ç–∞: {currency}, –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_token}")

        await callback.bot.send_invoice(
            chat_id=callback.message.chat.id,
            title="–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞",
            description="–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞ (—Ç–µ—Å—Ç)\n‚ö†Ô∏è –ö–∞—Å—Å–æ–≤—ã–π —á–µ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Telegram (Android/iOS).",
            payload="test_payment",
            provider_token=provider_token,
            currency=currency,
            prices=prices,
            start_parameter="test_order_123",
            need_email=False,
            need_phone_number=True,
            reply_markup=keyboard
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.message.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@router.pre_checkout_query()
async def pre_checkout_query_handler(pre_checkout_query: PreCheckoutQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂"""
    await pre_checkout_query.answer(ok=True)


@router.message(F.content_type == types.ContentType.SUCCESSFUL_PAYMENT)
async def process_successful_payment(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂"""
    # –ø—Ä–æ—Å—Ç–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–∂–µ –∏—Å—Ö–æ–¥—è –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    pass


@sync_to_async
def delete_basket(telegram_id):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    Basket.objects.filter(telegram_id=telegram_id).delete()

@sync_to_async
def create_order(telegram_id, full_name):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    return Order.objects.create(
        telegram_id=telegram_id,
        full_name=full_name,
        status="–û–ø–ª–∞—á–µ–Ω"
    )

@router.callback_query(F.data == "pay_order")
async def procces_success_orderpay(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ë–î."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.first_name} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª –∫–æ—Ä–∑–∏–Ω—É.")
    await callback.message.delete()

    user_data = await state.get_data()
    telegram_id = callback.from_user.id
    full_name = callback.from_user.full_name

    await delete_basket(telegram_id)  # ‚úÖ –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    order = await create_order(telegram_id, full_name)  # ‚úÖ –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î

    amount = user_data.get("amount", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    currency = user_data.get("currency", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    logger.info(f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id} –æ—Ç {full_name} ({telegram_id}) –Ω–∞ —Å—É–º–º—É {amount} {currency}")

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
    )

    await callback.message.answer(
        f"‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
        f"üí∞ –°—É–º–º–∞: {amount} {currency}\n"
        f"üìå –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!",
        reply_markup=keyboard
    )

from handlers.DefaultCommands.StartCommand import start_command

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'"""
    await callback.message.delete()
    await start_command(callback, state)
