from aiogram import types, F
from aiogram.fsm.context import FSMContext
from asgiref.sync import sync_to_async
from handlers.routes import router, logger
from basket.models import Basket
from products.models import Product
from aiogram.utils.keyboard import InlineKeyboardBuilder
from states.history_static import set_user_state
from states.states import UserState

async def get_basket_item(telegram_id, product_id):
    """ –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ telegram_id –∏ product_id """
    return await sync_to_async(lambda: Basket.objects.select_related("product").filter(
        telegram_id=telegram_id, product_id=product_id
    ).first())()

async def update_basket_item(telegram_id, product_id, count_change):
    """ –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ """
    basket_item = await get_basket_item(telegram_id, product_id)
    if basket_item:
        new_count = basket_item.count + count_change
        if new_count <= 0:
            await delete_basket_item(telegram_id, product_id)  # –£–¥–∞–ª—è–µ–º, –µ—Å–ª–∏ 0
            return None
        basket_item.count = new_count
        await sync_to_async(basket_item.save)()
    return basket_item

async def delete_basket_item(telegram_id, product_id):
    """ –£–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã """
    await sync_to_async(lambda: Basket.objects.filter(telegram_id=telegram_id, product_id=product_id).delete())()



from aiogram.types import InputMediaPhoto, FSInputFile
from keyboards.catalog.navigration import build_cart_keyboard

@router.callback_query(F.data.startswith("select_product_"))
async def show_selected_product(callback: types.CallbackQuery, state: FSMContext):
    """ –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ """
    await set_user_state(state, UserState.basket_item_select)

    user_id = callback.from_user.id
    product_id = int(callback.data.split("_")[-1])

    basket_item = await get_basket_item(user_id, product_id)
    if not basket_item:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ!")
        return

    product = basket_item.product
    caption = f"<b>{product.name}</b>\nüí∞ –¶–µ–Ω–∞: {product.price} —Ä—É–±.\nüõí –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {basket_item.count}"
    keyboard = build_cart_keyboard(product_id, basket_item.count)

    buttons = keyboard.export()

    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    for row in buttons:
        row[:] = [btn for btn in row if btn.callback_data != "back"]

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardBuilder()
    for row in buttons:
        keyboard.row(*row)

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard.row(
        types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"delete_product_{product_id}"),
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")
    )
    images = await sync_to_async(lambda: list(product.images.all()))()
    image_path = images[0].image.path if images else "server/assets/images/computers.png"
    try:
        if callback.message.photo:
            await callback.message.edit_media(
                media=InputMediaPhoto(
                    media=FSInputFile(image_path),
                    caption=caption
                ),
                reply_markup=keyboard.as_markup()
            )
        else:
            await callback.message.edit_text(caption, reply_markup=keyboard.as_markup())
    except Exception as e:
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ!", show_alert=True)


@router.callback_query(F.data.startswith("increase_"))
async def increase_product(callback: types.CallbackQuery):
    """ –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.first_name} —É–≤–µ–ª–∏—á–∏–ª –∫–æ–ª-–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ.")

    user_id = callback.from_user.id
    product_id = int(callback.data.split("_")[-1])

    basket_item = await update_basket_item(user_id, product_id, 1)
    if not basket_item:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞!")
        return

    await show_selected_product(callback)

@router.callback_query(F.data.startswith("decrease_"))
async def decrease_product(callback: types.CallbackQuery):
    """ –£–º–µ–Ω—å—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.first_name} —É–º–µ–Ω—å—à–∏–ª –∫–æ–ª-–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ.")

    user_id = callback.from_user.id
    product_id = int(callback.data.split("_")[-1])

    basket_item = await update_basket_item(user_id, product_id, -1)
    if not basket_item:
        await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç
        return

    await show_selected_product(callback)

from handlers.DefaultCommands.StartCommand import start_command

@router.callback_query(F.data.startswith("delete_product_"))
async def delete_product(callback: types.CallbackQuery, state: FSMContext):
    """ –£–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.first_name} —É–¥–∞–ª–∏–ª –ø—Ä–æ–¥—É–∫—Ç —Å –∫–æ—Ä–∑–∏–Ω—ã.")

    user_id = callback.from_user.id
    product_id = int(callback.data.split("_")[-1])

    await delete_basket_item(user_id, product_id)
    await callback.answer("–í—ã —É–¥–∞–ª–∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç —Å –∫–æ—Ä–∑–∏–Ω—ã!")
    # await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —Ç–æ–≤–∞—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ—Ç
    await start_command(callback, state)  # –ü–µ—Ä–µ–¥–∞–µ–º callback –≤–º–µ—Å—Ç–æ callback.message